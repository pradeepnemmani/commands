# installing Sublime..
	
		1.sudo add-apt-repository ppa:webupd8team/sublime-text-3
		2.sudo apt-get update
		3.sudo apt-get install sublime-text-installer
		Usage of sublime
		1.subl 

# installing Mysql...

		sudo apt-get install mysql-server -- To restart mysql server
		
		sudo service mysql restart -- To stop mysql server
		
		sudo service mysql stop -- To login in mysql database
		
		mysql -u root -p

# few database commands

		show databases;
		use database_name;
		show databases;
		show tables;
		To stop mysql server
		sudo service mysql start


# RVM installation 

		1.sudo apt-get install curl #it will install curl

		2.\curl -sSL https://get.rvm.io | bash -s stable

		3.gpg --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3 -- #if you get error in step2


# Ruby installation 

		ruby version on it
			rvm -v -- give version of rvm insalled
			rvm list -- list all the ruby versions installed on ubunu machine
			rvm install 1.9.3 -- installs ruby version 1.9.3
			rvm install 1.8.7 --
			rvm install 2.0.0 --
			rvm list
			rvm use 1.9.3 -- used select ruby version 1.9.3
			ruby -v -- it will gives 1.9.3
			rvm use 2.0.0
			ruby -v --it will give 2.0.0
			rvm use 1.8.7
			ruby -v -- will give 1.8.7


# installing rails

		1. install 2.3.5,3.2.3,4.0.0 rails versions in ruby 1.9.3 by creating proper gemsets

				rvm use 1.9.3 -- used select ruby 1.9.3
				rvm gemset create rails2 -- create a gemset for rails2
				rvm gemset use rails2 -- select the gemset for rails2
				gem install rails -v '2.3.5'
				
				rvm gemset create rails3 -- create a gemset for rails3
				rvm gemset use rails3 -- select the gemset for rails3
				gem install rails -v '3.2.3'
				
				rvm gemset create rails4 -- create a gemset for rails2	
				rvm gemset use rails4 -- select the gemset for rails2
				gem install rails -v '4.0.0'

		2. inatsall 3.2.3 , 4.0.0,4.1.0 rails versions in ruby 2.0.0 using proper gemsets

				rvm use 2.0.0 -- used select ruby 2.0.0
				rvm gemset create rails3 -- create a gemset for rails2
				rvm gemset use rails3 -- select the gemset for rails2
				gem install rails -v '3.2.3'
				
				rvm gemset create rails4 -- create a gemset for rails3
				rvm gemset use rails4 -- select the gemset for rails3
				gem install rails -v '4.0.0'
				
				rvm gemset create rails41 -- create a gemset for rails2
				rvm gemset use rails41 -- select the gemset for rails2
				gem install rails -v '4.1.0'

		3. install 2.3.5, 2.8.7 and 3.0.0 rails versions in ruby 1.8.7 using proper gemsets
				
				rvm use 1.8.7 -- used select ruby 1.8.7
				rvm gemset create rails2
				rvm gemset use rails2 -- select the gemset for rails2
				gem install rails -v '2.3.5'
				
				rvm gemset create rails28 -- create a gemset for rails28
				rvm gemset use rails28 -- select the gemset for rails28
				gem install rails -v '2.8.7'
				
				rvm gemset create rails3 -- create a gemset for rails3
				rvm gemset use rails3 -- select the gemset for rails3
				gem install rails -v '3.0.0'


# to run rails server in specific address

			rails server -p 3002/3000/3001....


# install Git...

		1. install development tolls
			sudo apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev build-essential

		2.install git
			sudo apt-get install git-core

		3. configure the git usename and email id(sudo nano ~/.gitconfig)
			git config --global user.name "pradeep"
			git config --global user.email pradeepnemmani@gmail.com

		4.git config --list


# few common commands
		
		git branches -- shows all branches

		git checkout -b child_branch -- creates new branch and makes child_bramch to develop

		git diff -- shows the line by line differen between older and modified code

		git diff file_name -- lists changes made to file_name file

		git log -p -- shows git log (details/history of commited )

# few git commands...

		git status -- shows the updated files

		git add . --  converts untracked files to tracked files

		git commit -m "proper comment" -- comments for the updates

		git push -u origin master -- "push the code to repository"


# few commands for  pushing the code from child branch

		git checkout -b child_branch -- creates new branch and makes child_bramch to develop

		git add . --  converts untracked files to tracked files

		git commit -m "proper comment" -- comments for the updates

		git checkout master -- change the working branch to master before push

		git push -- "push the code to repository"


# cloning the repository/directory

		git init -- initialising the git

		git remote add origin PATH/TO/REPO(ex:- git remote add origin https://github.com/pradeepnemmani/user_details.git)
		
		git fetch

		git clone PATH/TO/REPO(ex:- git clone https://github.com/pradeepnemmani/user_details.git)


# few important points ROR developing
	
		rails new  rails_app -- creates new application

		bundle install -- installs all gems required for application(which are mentioned in gem file)

		rails generate controller controller_name method1  method1 method2 method3............ -- creates the controller with methods 

		rails generate model model_name prop1:string/integer  prop2:string/integer  prop3:string/integer  ....... -- creates the model with properties

		rake db:migrate -- run this command when ever model is creates

		rake db:test:prepare -- run this command when for testing

		rails generate migration migration_name_to_model property:string/integer  property2:string/integer ...  -- adds the  property to model(to_model mentioned)

		rake db:migrate -- run this command when ever model/migrate is added


# rails/heroku debug commands or test in rails console....

	Imp command == for debugging***********************************<%= debug(params) if Rails.env.development?%> ***********************************

		Rails.env?
		=> development/test/production
 Don't know how to build task 'db:migrate'
    /Users/Jaken/.rvm/gems/ruby-1.9.3-p547/bin/ruby_executable_hooks:15:in `eval'
    /Users/Jaken/.rvm/gems/ruby-1.9.3-p547/bin/ruby_executable_hooks:15:in `<main>'
		Rails.env.development?
		=> true/false

		Rails.env.test?
		=> true/false

		Rails.env.production?
		=> true/false




# installing rspec

		rails generate rspec:install




#rake commands
	
		rake db:reset -- deleted old data in all tables

		rake db:create -- creates db (makes ready the dataabse)
		
		rake db:migrate -- add the database

# rake errors

 Don't know how to build task 'db:migrate'
    /Users/Jaken/.rvm/gems/ruby-1.9.3-p547/bin/ruby_executable_hooks:15:in `eval'
    /Users/Jaken/.rvm/gems/ruby-1.9.3-p547/bin/ruby_executable_hooks:15:in `<main>'

		solution
			Make sure you create the db before. rake db:create or rake db:setup will creat and migrate. 

			Does 'rake db:migrate' show up when you run 'rake -T'?

then type
			or alternatively bundle exec rake db:migrate depending on how the app/gems are installed.





# javascript default tag(example)

		<%= link_to "delete" , user, :method => :delete, :config => "you sure?",
				:title => "Delete #{user.name}"%>

add the javascript line in aplication html

		<%= javascript_include_tag :default %>


#inspect tag
		raise request.inspect -- add this in controller method

		raise [:user].inspect -- add this in controller method


# Digest (excryption)
	
		requir 'digest'
		
		Digest::SHA2.hexdigest("to_encrypt")
# time 

		Time.now.utc



it "should have a non-blank body" do
      		get  :home
      		response.body.should_not =~ /<body>\s*<\/body>/ ------- check whether body is not empty...
  end


  correct email-regix -- email_regex = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i




# has_many through associations example...

class Patient < ActiveRecord::Base
  attr_accessible :name
   has_many :physicians, :through => :appointment
  has_many :appointments
 
end

class Physician < ActiveRecord::Base
  attr_accessible :name
  has_many :patients, :through => :appointment
  has_many :appointments
end


class Appointment < ActiveRecord::Base
  # attr_accessible :title, :body
end


class CreateAppointments < ActiveRecord::Migration
  def change
    create_table :appointments do |t|
    	t.integer :patient_id
    	i.integer :physician_id
      t.timestamps
    end
    add_index :appointments, :patient_id
    add_index :appointments, :physician_id

  end
end



 ap= Appointment.new()
 => #<Appointment id: nil, created_at: nil, updated_at: nil, patient_id: nil, physician_id: nil> 
1.9.3-p551 :024 > ap
 => #<Appointment id: nil, created_at: nil, updated_at: nil, patient_id: nil, physician_id: nil> 
1.9.3-p551 :025 > ap.patient_id = Patient.find(1).id
  Patient Load (146.0ms)  SELECT "patients".* FROM "patients" WHERE "patients"."id" = ? LIMIT 1  [["id", 1]]
 => 1 
1.9.3-p551 :026 > ap.physician_id = Physician.find(1).id
  Physician Load (0.3ms)  SELECT "physicians".* FROM "physicians" WHERE "physicians"."id" = ? LIMIT 1  [["id", 1]]
 => 1 
1.9.3-p551 :027 > ap.save
   (0.2ms)  begin transaction
  SQL (73.0ms)  INSERT INTO "appointments" ("created_at", "patient_id", "physician_id", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Sun, 05 Jul 2015 16:27:29 UTC +00:00], ["patient_id", 1], ["physician_id", 1], ["updated_at", Sun, 05 Jul 2015 16:27:29 UTC +00:00]]
   (23.4ms)  commit transaction
 => true 
1.9.3-p551 :028 > ap
 => #<Appointment id: 1, created_at: "2015-07-05 16:27:29", updated_at: "2015-07-05 16:27:29", patient_id: 1, physician_id: 1> 



# polymorphic associations


class Employee < ActiveRecord::Base
  attr_accessible :id, :nams
   has_many :pictures, as: :imageble
end


class Product < ActiveRecord::Base
  attr_accessible :nams
has_many :pictures, as: :imageble
end


class Picture < ActiveRecord::Base
  # attr_accessible :title, :body
  belongs_to :imageble, polymorphic: true
end


class CreatePictures < ActiveRecord::Migration
  def change
   # create_table :pictures do |t|
    #	t.references :imageble, polymorphic: true, index: true

     # t.timestamps

     create_table :pictures do |t|
     	t.integer :imageble_id
      t.string   :imageble_type
     	t.timestamps

    end
    add_index :pictures, :imageble_id
    add_index :pictures, :imageble_type
  end
end


1.9.3-p551 :007 > emp=Employee.create(:nams => "pradeep kumar")
   (0.3ms)  begin transaction
  SQL (4.0ms)  INSERT INTO "employees" ("created_at", "nams", "updated_at") VALUES (?, ?, ?)  [["created_at", Sun, 05 Jul 2015 16:38:45 UTC +00:00], ["nams", "pradeep kumar"], ["updated_at", Sun, 05 Jul 2015 16:38:45 UTC +00:00]]
   (28.2ms)  commit transaction
 => #<Employee id: 2, nams: "pradeep kumar", created_at: "2015-07-05 16:38:45", updated_at: "2015-07-05 16:38:45"> 
1.9.3-p551 :008 > emp.pictures.create()
   (0.2ms)  begin transaction
  SQL (3.0ms)  INSERT INTO "pictures" ("created_at", "imageble_id", "imageble_type", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Sun, 05 Jul 2015 16:39:03 UTC +00:00], ["imageble_id", 2], ["imageble_type", "Employee"], ["updated_at", Sun, 05 Jul 2015 16:39:03 UTC +00:00]]
   (11.7ms)  commit transaction
 => #<Picture id: 4, created_at: "2015-07-05 16:39:03", updated_at: "2015-07-05 16:39:03", imageble_id: 2, imageble_type: "Employee"> 
1.9.3-p551 :010 > prd=Product.create(:nams=>"car")
   (13.4ms)  begin transaction
  SQL (3.3ms)  INSERT INTO "products" ("created_at", "nams", "updated_at") VALUES (?, ?, ?)  [["created_at", Sun, 05 Jul 2015 16:39:55 UTC +00:00], ["nams", "car"], ["updated_at", Sun, 05 Jul 2015 16:39:55 UTC +00:00]]
   (107.9ms)  commit transaction
 => #<Product id: 3, nams: "car", created_at: "2015-07-05 16:39:55", updated_at: "2015-07-05 16:39:55"> 
1.9.3-p551 :011 > prd.pictures.create
   (0.1ms)  begin transaction
  SQL (1.0ms)  INSERT INTO "pictures" ("created_at", "imageble_id", "imageble_type", "updated_at") VALUES (?, ?, ?, ?)  [["created_at", Sun, 05 Jul 2015 16:40:13 UTC +00:00], ["imageble_id", 3], ["imageble_type", "Product"], ["updated_at", Sun, 05 Jul 2015 16:40:13 UTC +00:00]]
   (26.4ms)  commit transaction
 => #<Picture id: 5, created_at: "2015-07-05 16:40:13", updated_at: "2015-07-05 16:40:13", imageble_id: 3, imageble_type: "Product"> 
1.9.3-p551 :012 > 


